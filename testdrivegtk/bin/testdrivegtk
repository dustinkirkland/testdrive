#!/usr/bin/python
# -*- coding: utf-8 -*-
### BEGIN LICENSE
# This file is in the public domain
### END LICENSE

import sys
import os
import gtk
import subprocess

# Check if we are working in the source tree or from the installed 
# package and mangle the python path accordingly
if os.path.dirname(sys.argv[0]) != ".":
    if sys.argv[0][0] == "/":
        fullPath = os.path.dirname(sys.argv[0])
    else:
        fullPath = os.getcwd() + "/" + os.path.dirname(sys.argv[0])
else:
    fullPath = os.getcwd()
sys.path.insert(0, os.path.dirname(fullPath))

from testdrivegtk import AboutTestdrivegtkDialog, PreferencesTestdrivegtkDialog
from testdrivegtk.testdrivegtkconfig import getdatapath
from testdrivegtk.AsynchTaskProgressBox import AsynchTaskProgressBox
import isos

class TestdrivegtkWindow(gtk.Window):
    __gtype_name__ = "TestdrivegtkWindow"

    def __init__(self):
        """__init__ - This function is typically not called directly.
        Creation a TestdrivegtkWindow requires redeading the associated ui
        file and parsing the ui definition extrenally,
        and then calling TestdrivegtkWindow.finish_initializing().

        Use the convenience function NewTestdrivegtkWindow to create
        TestdrivegtkWindow object.

        """
        pass

    def finish_initializing(self, builder):
        """finish_initalizing should be called after parsing the ui definition
        and creating a TestdrivegtkWindow object with it in order to finish
        initializing the start of the new TestdrivegtkWindow instance.

        """
        #get a reference to the builder and set up the signals
        self.builder = builder
        self.builder.connect_signals(self)

        #uncomment the following code to read in preferences at start up
        #dlg = PreferencesTestdrivegtkDialog.NewPreferencesTestdrivegtkDialog()
        #self.preferences = dlg.get_preferences()

        #code for other initialization actions should be added here
        for iso in isos.images:
            text, url = iso
            isobutt = gtk.Button(text)
            isobutt.connect("clicked",self.run_image, url)
            isobutt.show()
            self.builder.get_object("button_vbox").pack_start(isobutt)
    
        
    def run_image(self, widget, url):
        params = {"url":url}
        task_box = AsynchTaskProgressBox(self.image_task, params, cancelable = False)
        task_box.show()
        self.builder.get_object("progress_box").pack_start(task_box)
        task_box.start()

    def image_task(self, params):
        cmd = fullPath + "/testdrive -u " + params["url"]
        process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
        line = process.stdout.readline()
        while line !="":
            if line.startswith("INFO:"):
                txt = line.split(":")[1]
                pb = self.builder.get_object("progress_box").get_children()[0].progressbar
                pb.set_text(txt)
            elif line.startswith("ERROR:"):
                #TODO bail
                pass
            elif line.startswith("WARNING:"):
                #TODO have a warning
                pass
            line = process.stdout.readline()

    def about(self, widget, data=None):
        """about - display the about box for testdrivegtk """
        about = AboutTestdrivegtkDialog.NewAboutTestdrivegtkDialog()
        response = about.run()
        about.destroy()

    def preferences(self, widget, data=None):
        """preferences - display the preferences window for testdrivegtk """
        prefs = PreferencesTestdrivegtkDialog.NewPreferencesTestdrivegtkDialog()
        response = prefs.run()
        if response == gtk.RESPONSE_OK:
            #make any updates based on changed preferences here
            pass
        prefs.destroy()

    def quit(self, widget, data=None):
        """quit - signal handler for closing the TestdrivegtkWindow"""
        self.destroy()

    def on_destroy(self, widget, data=None):
        """on_destroy - called when the TestdrivegtkWindow is close. """
        #clean up code for saving application state should be added here

        gtk.main_quit()

def NewTestdrivegtkWindow():
    """NewTestdrivegtkWindow - returns a fully instantiated
    TestdrivegtkWindow object. Use this function rather than
    creating a TestdrivegtkWindow directly.
    """

    #look for the ui file that describes the ui
    ui_filename = os.path.join(getdatapath(), 'ui', 'TestdrivegtkWindow.ui')
    if not os.path.exists(ui_filename):
        ui_filename = None

    builder = gtk.Builder()
    builder.add_from_file(ui_filename)
    window = builder.get_object("testdrivegtk_window")
    window.finish_initializing(builder)
    return window

if __name__ == "__main__":
    #support for command line options
    import logging, optparse
    parser = optparse.OptionParser(version="%prog %ver")
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose", help="Show debug messages")
    (options, args) = parser.parse_args()

    #set the logging level to show debug messages
    if options.verbose:
        logging.basicConfig(level=logging.DEBUG)
        logging.debug('logging enabled')

    #run the application
    window = NewTestdrivegtkWindow()
    window.show()
    gtk.gdk.threads_init()
    gtk.main()

