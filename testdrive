#!/bin/sh -e
#
#    testdrive - run today's Ubuntu development ISO, in a virtual machine
#    Copyright (C) 2009 Canonical Ltd.
#    Copyright (C) 2009 Dustin Kirkland
#
#    Authors: Dustin Kirkland <kirkland@canonical.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

PKG="testdrive"
PKGRC=$PKG"rc"

usage() {
	echo "
Usage:
  $PKG [-f FILE] [-u URL]

  $PKG is a utility that allows you to easily download the latest Ubuntu
  development release and run it in a KVM virtual machine.

  All options to this program are handled through the global configuration
  file, /etc/$PKGRC, and then the user's local configuration file,
  ~/.$PKGRC.

  Users wanting to change the behavior default configuration can make a
  copy of /etc/$PKGRC, and pass this as a parameter to $PKG.
"
	exit 1
}

# Source global configuration overrides
[ -r "/etc/$PKG.conf" ] && . "/etc/$PKG.conf"

# Source user configuration overrides
[ -r "$HOME/.$PKG"rc ] && . "$HOME/.$PKG"rc

# Handle parameters
while [ -n "$1" ]; do
	case "$1" in
		-f)
			[ -r "$2" ] && . "$2" || usage
			shift 2
		;;
		-u)
			ISO_URL="$2"
			if ! echo "$ISO_URL" | grep -qs "\.iso$"; then
				echo "ERROR: URL parameter must point to a .iso file" 1>&2
				exit 1
			fi
			shift 2
		;;
		*)
			usage
		;;
	esac
done

# Check if KVM acceleration can be used
if kvm-ok; then
	true
else
	echo "WARNING: Your CPU's lack of VT will impact the performance of your VMs!"
fi

# Set defaults where undefined
[ -z "$CACHE" ] && CACHE="$HOME/.cache/$PKG"
mkdir -p $CACHE
[ -z "$CODENAME" ] && CODENAME="karmic"
[ -z "$TYPE" ] && TYPE="desktop"
[ -z "$ARCH" ] && [ "$(uname -m)" = "x86_64" ] && ARCH="amd64" || ARCH="i386"
[ -z "$PROTO" ] && PROTO="rsync"
[ -z "$MIRROR" ] && MIRROR="cdimage.ubuntu.com"
[ -z "$DIR" ] && DIR="cdimage/daily-live/current/"
[ -z "$ISO_URL" ] && ISO_URL="$PROTO://$MIRROR/$DIR/$CODENAME-$TYPE-$ARCH.iso"
ISO=$(echo "$ISO_URL" | sed "s:.*/::")
PROTO=$(echo "$ISO_URL" | sed "s/:.*$//")
[ -z "$MEM" ] && [ $(grep "^MemTotal" /proc/meminfo | awk '{print $2}') -gt 1000000 ] && MEM=512 || MEM=256
[ -z "$DISK_FILE" ] && DISK_FILE=$CACHE/$ISO.img
[ -z "$DISK_SIZE" ] && DISK_SIZE=6G
[ -z "$KVM_ARGS" ] && KVM_ARGS="-usb -usbdevice tablet -net nic,model=virtio -net user -soundhw es1370"
PATH_TO_ISO="$CACHE/$ISO"

# BUG: should check disk space availability in $CACHE dir
# Update the cache
echo
echo "INFO: Syncing the specified ISO..."
case $PROTO in
	rsync)
		set -x
		rsync -aP $ISO_URL $PATH_TO_ISO
		set +x
	;;
	http|ftp)
		if which zsync >/dev/null; then
			cd $CACHE
			set -x
			zsync $ISO_URL.zsync
			set +x
			cd -
		else
			set -x
			wget $ISO_URL -o $PATH_TO_ISO
			set +x
		fi
	;;
	file)
		# If the iso is on file:///, use the ISO in place
		PATH_TO_ISO=$(echo $ISO_URL | sed "s/^file:\///")
	;;
	*)
		echo "ERROR: Unsupported protocol [$PROTO]" 1>&2
		exit 1
	;;
esac

# Create the disk image
echo
echo "INFO: Creating disk image..."
set -x
/usr/bin/kvm-img create -f qcow2 $DISK_FILE $DISK_SIZE
set +x

# Launch the VM
echo
echo "INFO: Launching the Virtual Machine..."
set -x
/usr/bin/kvm -m $MEM -cdrom $PATH_TO_ISO -drive file=$DISK_FILE,if=virtio,index=0,boot=on $KVM_ARGS
set +x

# Remind about cache cleanup
echo
echo "INFO: You may clean up the cache directory, at your leisure..."
echo "      $CACHE"
ls -halF $CACHE
du -sh --apparent-size $CACHE
echo
